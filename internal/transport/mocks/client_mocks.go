// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_transport is a generated GoMock package.
package mock_transport

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/hugorut/coins-oracle/pkg/transport"
	reflect "reflect"
)

// MockCoinClient is a mock of CoinClient interface
type MockCoinClient struct {
	ctrl     *gomock.Controller
	recorder *MockCoinClientMockRecorder
}

// MockCoinClientMockRecorder is the mock recorder for MockCoinClient
type MockCoinClientMockRecorder struct {
	mock *MockCoinClient
}

// NewMockCoinClient creates a new mock instance
func NewMockCoinClient(ctrl *gomock.Controller) *MockCoinClient {
	mock := &MockCoinClient{ctrl: ctrl}
	mock.recorder = &MockCoinClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoinClient) EXPECT() *MockCoinClientMockRecorder {
	return m.recorder
}

// GetInfo mocks base method
func (m *MockCoinClient) GetInfo() (*transport.CoinState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(*transport.CoinState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo
func (mr *MockCoinClientMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockCoinClient)(nil).GetInfo))
}

// GetBalance mocks base method
func (m *MockCoinClient) GetBalance(addr string) (*transport.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr)
	ret0, _ := ret[0].(*transport.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockCoinClientMockRecorder) GetBalance(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockCoinClient)(nil).GetBalance), addr)
}

// GetTransactionByHash mocks base method
func (m *MockCoinClient) GetTransactionByHash(hash string) (*transport.TransactionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", hash)
	ret0, _ := ret[0].(*transport.TransactionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockCoinClientMockRecorder) GetTransactionByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockCoinClient)(nil).GetTransactionByHash), hash)
}
